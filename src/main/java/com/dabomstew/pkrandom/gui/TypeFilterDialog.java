/*----------------------------------------------------------------------------*/
/*--  TypeFilterDialog.java - a GUI allowing the filtering of types that a  --*/
/*--                          starter Pokemon is allowed to have            --*/
/*--                                                                        --*/
/*--  Part of "Universal Pokemon Randomizer" by Dabomstew                   --*/
/*--  Pokemon and any associated names and the like are                     --*/
/*--  trademark and (C) Nintendo 1996-2012.                                 --*/
/*--                                                                        --*/
/*--  The custom code written here is licensed under the terms of the GPL:  --*/
/*--                                                                        --*/
/*--  This program is free software: you can redistribute it and/or modify  --*/
/*--  it under the terms of the GNU General Public License as published by  --*/
/*--  the Free Software Foundation, either version 3 of the License, or     --*/
/*--  (at your option) any later version.                                   --*/
/*--                                                                        --*/
/*--  This program is distributed in the hope that it will be useful,       --*/
/*--  but WITHOUT ANY WARRANTY; without even the implied warranty of        --*/
/*--  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the          --*/
/*--  GNU General Public License for more details.                          --*/
/*--                                                                        --*/
/*--  You should have received a copy of the GNU General Public License     --*/
/*--  along with this program. If not, see <http://www.gnu.org/licenses/>.  --*/
/*----------------------------------------------------------------------------*/
package com.dabomstew.pkrandom.gui;

import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
import javax.swing.JCheckBox;
import javax.swing.JList;
import javax.swing.ListCellRenderer;
import javax.swing.ListSelectionModel;
import javax.swing.UIManager;
import javax.swing.border.Border;
import javax.swing.border.EmptyBorder;

/**
 *
 * @author bspector
 */
public class TypeFilterDialog extends javax.swing.JDialog {

    private boolean pressedOk;
    private List<JCheckBox> typeCheckboxArray;
    
    /**
     * Creates new form TypeFilterDialog
     */
    public TypeFilterDialog(java.awt.Frame parent, List typesInGame) {
        super(parent, true);
        initComponents();
        initialState(typesInGame);
        pressedOk = false;
        setLocationRelativeTo(parent);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        includeTypeHeader = new javax.swing.JLabel();
        okButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        typeCheckboxList = new javax.swing.JList<>();
        cancelButton = new javax.swing.JButton();
        deselectAll = new javax.swing.JButton();
        selectAll = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        includeTypeHeader.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("com/dabomstew/pkrandom/gui/Bundle"); // NOI18N
        includeTypeHeader.setText(bundle.getString("TypeFilterDialog.includeTypeHeader.text")); // NOI18N

        okButton.setText(bundle.getString("TypeFilterDialog.okButton.text")); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(typeCheckboxList);

        cancelButton.setText(bundle.getString("TypeFilterDialog.cancelButton.text")); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        deselectAll.setText(bundle.getString("TypeFilterDialog.deselectAll.text")); // NOI18N
        deselectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deselectAllActionPerformed(evt);
            }
        });

        selectAll.setText(bundle.getString("TypeFilterDialog.selectAll.text")); // NOI18N
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(okButton)
                        .addGap(236, 236, 236)
                        .addComponent(cancelButton))
                    .addComponent(includeTypeHeader, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(deselectAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(selectAll, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(includeTypeHeader)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(101, 101, 101)
                        .addComponent(selectAll)
                        .addGap(36, 36, 36)
                        .addComponent(deselectAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 83, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(okButton)
                    .addComponent(cancelButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private class CellRenderer implements ListCellRenderer
    {
        private final Border noFocusBorder = new EmptyBorder(1, 1, 1, 1);
        private JList mainList = TypeFilterDialog.this.typeCheckboxList;
        public Component getListCellRendererComponent(
                    JList list, Object value, int index,
                    boolean isSelected, boolean cellHasFocus)
        {
            JCheckBox checkbox = (JCheckBox) value;
            checkbox.setBackground(isSelected ?
                    mainList.getSelectionBackground() : getBackground());
            checkbox.setForeground(isSelected ?
                    mainList.getSelectionForeground() : getForeground());
            checkbox.setEnabled(isEnabled());
            checkbox.setFont(getFont());
            checkbox.setFocusPainted(false);
            checkbox.setBorderPainted(true);
            checkbox.setBorder(isSelected ?
            UIManager.getBorder(
            "List.focusCellHighlightBorder") : noFocusBorder);
            return checkbox;
        }
    }
    
    private void initialState(List typesInGame) {
        typeCheckboxList.setCellRenderer(new CellRenderer());
        typeCheckboxList.addMouseListener(new MouseAdapter()
           {
               JList mainList = TypeFilterDialog.this.typeCheckboxList;
              public void mousePressed(MouseEvent e)
              {
                 int index = mainList.locationToIndex(e.getPoint());

                 if (index != -1) {
                    JCheckBox checkbox = (JCheckBox) mainList.getModel().getElementAt(index);
                    checkbox.setSelected(!checkbox.isSelected());
                    repaint();
                 }
              }
           }
        );

        typeCheckboxList.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        typeCheckboxArray = new ArrayList<JCheckBox>();
        for (int i = 0; i < typesInGame.size(); i++) {
            typeCheckboxArray.add(new JCheckBox(typesInGame.get(i).toString()));
        }
        this.typeCheckboxList.setListData(typeCheckboxArray.toArray(
                new JCheckBox[typesInGame.size()]));
    }
    
    public List<String> getChoice() {
        return typeCheckboxArray.stream().filter(cb -> cb.isSelected())
                .map(cb -> cb.getText()).collect(Collectors.toList());
    }
    
    public boolean pressedOK() {
        return pressedOk;
    }
    
    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        pressedOk = true;
        this.setVisible(false);
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        pressedOk = false;
        this.setVisible(false);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        typeCheckboxArray.forEach(cb -> cb.setSelected(true));
        typeCheckboxList.repaint();
    }//GEN-LAST:event_selectAllActionPerformed

    private void deselectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deselectAllActionPerformed
        typeCheckboxArray.forEach(cb -> cb.setSelected(false));
        typeCheckboxList.repaint();
    }//GEN-LAST:event_deselectAllActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton deselectAll;
    private javax.swing.JLabel includeTypeHeader;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton okButton;
    private javax.swing.JButton selectAll;
    private javax.swing.JList<JCheckBox> typeCheckboxList;
    // End of variables declaration//GEN-END:variables
}
